package net.likelion.dailytales.authentication.application;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import net.likelion.dailytales.core.domain.user.User;
import net.likelion.dailytales.core.domain.user.UserRepository;
import net.likelion.dailytales.core.global.IdentifierGenerator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class SocialUserCreationSupport {
    @Value("${app.user.auto-generated-display-id-length}")
    private Integer autoGeneratedDisplayIdLength;

    //@Value("${app.user.default-profile-image}")
    private String defaultProfileImageUrl = "test";

    private final UserRepository userRepository;
    private final SocialAccountRepository socialAccountRepository;
    private final IdentifierGenerator identifierGenerator;

    /*
     * Create a new user with the given OAuthType and socialId.
     * @return the userId of the created user
     */
    @Transactional
    public String create(OAuthType type, String socialId) {
        String userId = identifierGenerator.generate();
        SocialAccount account = SocialAccount.of(type, socialId, userId);
        User newUser = new User(
                userId,
                String.format("%s_%s", type.value(), socialId),
                uniqueDisplayId(),
                defaultProfileImageUrl
        );
        socialAccountRepository.save(account);
        userRepository.save(newUser);
        return userId;
    }

    private String uniqueDisplayId() {
        String displayId = identifierGenerator.generate().substring(0, autoGeneratedDisplayIdLength);
        while (userRepository.existsByDisplayId(displayId)) {
            displayId = identifierGenerator.generate();
        }
        return displayId;
    }
}
